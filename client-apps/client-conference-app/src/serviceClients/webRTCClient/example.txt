const localVideo = document.getElementById('localVideo') as HTMLVideoElement;

const connection = new WebRTCClient(
  localVideo,
  (peerId, stream) => {
    const video = document.createElement('video');
    video.autoplay = true;
    video.srcObject = stream;
    video.id = `remote-${peerId}`;
    document.body.appendChild(video);
  },
  (peerId, candidate) => {
    socket.emit('ice-candidate', { to: peerId, candidate });
  }
);

await connection.initLocalMedia();

// When a new peer joins
socket.on('new-peer', async (peerId: string) => {
  connection.addPeer(peerId);
  const offer = await connection.createOffer(peerId);
  socket.emit('offer', { to: peerId, offer });
});

// When receiving an offer
socket.on('offer', async ({ from, offer }) => {
  connection.addPeer(from);
  await connection.setRemoteDescription(from, offer);
  const answer = await connection.createAnswer(from);
  socket.emit('answer', { to: from, answer });
});

// When receiving an answer
socket.on('answer', async ({ from, answer }) => {
  await connection.setRemoteDescription(from, answer);
});

// When receiving ICE
socket.on('ice-candidate', async ({ from, candidate }) => {
  await connection.addIceCandidate(from, candidate);
});
