import { ConferenceRoomConfig, ParticipantRole } from "@conf/conf-models";
import { WebSocket } from "ws";

export interface IAuthPayload {
    username: string,
    role: ParticipantRole
}


/**
 * active participant
 */
export class Participant {
    participantId: string = ""; //generated by server to keep track of connections
    userName: string = ""; //username for the user, unique, used to login ie from a database
    displayName: string = ""; //display name for the user
    socket?: WebSocket = undefined; //websocket connection
    conferenceRoom?: ConferenceRoom = undefined; //reference to a conf room
    role: "admin" | "user" | "guest" = "guest" ;
}

type conferenceStatus = "none" | "initializing" | "ready" | "closed";
export class ConferenceRoom {
    id: string;
    trackingId: string;
    timeoutId: any;
    timeoutSecs: number;
    roomURI: string;
    roomId: string;
    roomToken: string;
    roomRtpCapabilities: any;
    participants: Map<string, Participant> = new Map();
    status: conferenceStatus = "none";
    config = new ConferenceRoomConfig();
    
    onReadyListeners: (() => void)[] = [];
    onClose: (conf: ConferenceRoom) => void;

    addOnReadyListener(cb: () => void) {
        if (this.status == "ready") {
            cb();
            return;
        }
        this.onReadyListeners.push(cb);
    }

    removeOnReadyListener(callback: () => void): void {
        this.onReadyListeners = this.onReadyListeners.filter(listener => listener !== callback);
    }

    updateStatus(status: conferenceStatus) {
        this.status = status;
        
        if (status == "ready") {
            for (let cb of this.onReadyListeners) {
                cb();
            }
            this.onReadyListeners = [];
        }
    }

    removeParticipant(id: string) {
        let part = this.participants.get(id);
        if (part) {
            part.conferenceRoom = null;
            this.participants.delete(id);
        }

        if (this.participants.size == 0) {
            this.close();
        }
    }

    addParticipant(part: Participant) {
        if (this.participants.has(part.participantId)) {
            return;
        }

        this.participants.set(part.participantId, part);
        part.conferenceRoom = this;
        
    }

    close() {
        console.log(`conference close. ${this.id}`);

        for (let part of this.participants.values()) {
            part.conferenceRoom = null;
        }
        this.participants.clear();

        this.onReadyListeners = [];
        if(this.timeoutId) {
            clearTimeout(this.timeoutId);
        }

        if (this.onClose) {
            this.onClose(this);
        }
    }

}